# Reusable python test workflow
name: Test

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: "3.x"
        description: "Python version to use. Passed to `actions/setup-python`."
      os:
        required: false
        type: string
        default: ubuntu-latest
        description: "Operating system to use. Passed to `runs-on:`."
      extras:
        required: false
        type: string
        default: test
        description: "Package extras to install (may use commas for multiples `'test,docs'`). If you don't have an extra named 'test' you should change this."
      pip-install-flags:
        required: false
        type: string
        default: ""
        description: "Additional flags to pass to pip install. Can be used for `--editable`, `--no-deps`, etc."
      pip-install-pre-release:
        required: false
        type: boolean
        default: false
        description: "Whether to install pre-releases in the pip install phase with `--pre`."
        # example >>> pip-install-pre-release: github.event_name == 'schedule'
      pip-pre-installs:
        required: false
        type: string
        default: ""
        description: "Packages to install *before* calling `pip install .`"
      pip-post-installs:
        required: false
        type: string
        default: ""
        description: "Packages to install *after* `pip install .`. (these are called with `--force-reinstall`.)"
      qt:
        required: false
        type: string
        default: ""
        description: "Version of qt to install (or none if blank).  Will also install qt-libs and run tests headlessly if not blank."
      fetch-depth:
        required: false
        type: number
        default: 1
        description: "The number of commits to fetch. 0 indicates all history for all branches and tags."
      python-cache-dependency-path:
        required: false
        type: string
        default: "pyproject.toml"
        description: "passed to `actions/setup-python`"
      pytest-args:
        required: false
        type: string
        default: ""
        description: "Additional arguments to pass to pytest. Can be used to specify paths or for for `-k`, `-x`, etc."
      pytest-cov-flags:
        required: false
        type: string
        default: "--cov --cov-report=xml --cov-report=term-missing"
        description: "Flags to pass to pytest-cov. Can be used for `--cov-fail-under`, `--cov-branch`, etc. Note: it's best to specify `[tool.coverage.run] source = ['your_package']`."
      fail-on-coverage-error:
        required: false
        type: boolean
        default: true
        description: "Fail the build if codecov action fails."
      hatch-build-hooks-enable:
        required: false
        type: boolean
        default: false
        description: "Value for [`HATCH_BUILD_HOOKS_ENABLE`](https://hatch.pypa.io/latest/config/build/#environment-variables)."
      report-failures:
        required: false
        type: boolean
        default: false
        description: "Whether to create a GitHub issue when a test fails. Good for cron jobs."
        # example >>> report-failures: github.event_name == 'schedule'
    secrets:
      codecov-token:
        required: false
        description: "Token for opting into codecov-action@v4-beta. Only used if `pytest-cov-flags` is not empty."

jobs:
  test:
    name: ${{ inputs.os }} py${{ inputs.python-version }} ${{ inputs.qt }}
    runs-on: ${{ inputs.os }}
    env:
      HATCH_BUILD_HOOKS_ENABLE: ${{ inputs.hatch-build-hooks-enable }}
      CODECOV_TOKEN: ${{ secrets.codecov-token || secrets.CODECOV_TOKEN }}
      HAS_CODECOV_TOKEN: ${{ (secrets.codecov_token || secrets.CODECOV_TOKEN) && 'true' || 'false' }}
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache-dependency-path: ${{ inputs.python-cache-dependency-path }}
          cache: "pip"

      - name: Setup Qt Libraries
        if: ${{ inputs.qt != '' }}
        uses: tlambert03/setup-qt-libs@v1

      - name: Pip pre-install ${{ inputs.pip-pre-installs }}
        if: ${{ inputs.pip-pre-installs != '' }}
        run: python -m pip install ${{ inputs.pip-pre-installs }}

      - name: Install dependencies ${{ inputs.pip-install-pre-release && '--pre' || ''}}
        run: |
          python -m pip install --upgrade pip
          python -m pip install ${{ inputs.pip-install-flags }} .[${{ inputs.extras }}]
        env:
          # common usage might be:
          #   pip-install-pre-release: github.event_name == 'schedule'
          PIP_PRE: ${{ inputs.pip-install-pre-release }}

      - name: Install Qt ${{ inputs.qt }}
        if: ${{ inputs.qt != '' }}
        run: python -m pip install ${{ inputs.qt }}

      - name: Pip post-install ${{ inputs.pip-post-installs }}
        if: ${{ inputs.pip-post-installs != '' }}
        run: python -m pip install ${{ inputs.pip-post-installs }} --force-reinstall

      - name: Run tests
        if: ${{ inputs.qt == '' }}
        run: python -m pytest --color=yes ${{ inputs.pytest-cov-flags }} ${{ inputs.pytest-args }}

      - name: Run tests (headless)
        if: ${{ inputs.qt != '' }}
        uses: aganders3/headless-gui@v1
        with:
          run: python -m pytest --color=yes ${{ inputs.pytest-cov-flags }} ${{ inputs.pytest-args }}

      - name: Report failure
        # common usage might be: report-failures: github.event_name == 'schedule'
        if: ${{ failure() && inputs.report-failures }}
        uses: actions/github-script@v7
        env:
          ACTION_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          WORKFLOW_NAME: ${{ github.workflow }}
        with:
          script: |
            const { ACTION_URL, WORKFLOW_NAME } = process.env

            const issueTitle = `Tests failing in ${WORKFLOW_NAME}`;
            const labels = ['reusable-test-failure'];

            // Search for existing open issues with the same title and label
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels.join(','),
              state: 'open'
            });

            // If there is an open issue with the title, do not create a new one
            const hasOpenIssue = existingIssues.data.some(issue => issue.title === issueTitle);
            if (hasOpenIssue) {
              console.log('An open issue with the same title and label already exists. No new issue will be created.');
            } else {
              const issueBody = `A test failed. Please review the [workflow logs](${ACTION_URL}) for details.`;
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: labels
              });
              console.log('A new issue was created to report a failing test.');
            }

      # if CODECOV_TOKEN is available, v4 is a more robust action
      # https://community.codecov.com/t/upload-issues-unable-to-locate-build-via-github-actions-api/3954
      # HOWEVER: this won't work for any PR from a fork... making it essentially useless for now.
      # https://github.com/codecov/feedback/issues/112
      # (It will always fall back to v3)
      - name: codecov v4
        if: inputs.pytest-cov-flags != '' && env.HAS_CODECOV_TOKEN == 'true'
        uses: codecov/codecov-action@v4-beta
        with:
          fail_ci_if_error: ${{ inputs.fail-on-coverage-error }}
          verbose: true

      - name: codecov v3
        if: inputs.pytest-cov-flags != '' && env.HAS_CODECOV_TOKEN != 'true'
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: ${{ inputs.fail-on-coverage-error }}
          verbose: true
