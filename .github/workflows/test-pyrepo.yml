# Reusable python test workflow
name: Test

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: 3.x
        description: Python version to use. Passed to `actions/setup-python`.
      os:
        required: false
        type: string
        default: ubuntu-latest
        description: Operating system to use. Passed to `runs-on:`.
      extras:
        required: false
        type: string
        default: test
        description: >
          Package extras to install (may use commas for multiples `'test,docs'`).
          If you don't have an extra named 'test' you should change this.
      pip-install-flags:
        required: false
        type: string
        description: >
          Additional flags to pass to pip install.
          Can be used for `--editable`, `--no-deps`, etc.
      pip-install-pre-release:
        required: false
        type: boolean
        default: false
        description: Whether to install pre-releases in the pip install phase with `--pre`.
        # example >>> pip-install-pre-release: github.event_name == 'schedule'
      pip-install-min-reqs:
        required: false
        type: boolean
        default: false
        description: >
          Whether to install the *minimum* declared dependency versions.
      pip-pre-installs:
        required: false
        type: string
        default: ''
        description: >
          Packages to install *before* calling `pip install .`
      pip-post-installs:
        required: false
        type: string
        description: >
          Packages to install *after* `pip install .`.
          (these are called with `--force-reinstall`.)
      qt:
        required: false
        type: string
        description: >
          Version of qt to install (or none if blank).
          Will also install qt-libs and run tests headlessly if not blank.
      fetch-depth:
        required: false
        type: number
        default: 1
        description: >
          The number of commits to fetch. 0 indicates all history for all branches and tags.
      python-cache-dependency-path:
        required: false
        type: string
        default: pyproject.toml
        description: >
          passed to `actions/setup-python`
      pytest-args:
        required: false
        type: string
        description: >
          Additional arguments to pass to pytest.
          Can be used to specify paths or for for `-k`, `-x`, etc.
      fail-on-coverage-error:
        required: false
        type: boolean
        default: true
        description: >
          Fail the build if codecov action fails.
      hatch-build-hooks-enable:
        required: false
        type: boolean
        default: false
        description: >
          Value for
          [`HATCH_BUILD_HOOKS_ENABLE`](https://hatch.pypa.io/latest/config/build/#environment-variables).
      report-failures:
        required: false
        type: string
        description: >
          (true or false). Whether to create a GitHub issue when a test fails.
          If not set, will be true for scheduled runs, and false otherwise.
      cache-key:
        required: false
        type: string
        description: >
          Cache key to use for caching. If not set, no caching will be used.
      cache-path:
        required: false
        type: string
        description: >
          Path to cache. If not set, no caching will be used.
      cache-script:
        required: false
        type: string
        description: >
          Script to run to create the cache. If not set, no caching will be used.
      coverage-upload:
        required: false
        type: string
        default: codecov
        description: >
          How to upload coverage data. Options are `'artifact'`, `'codecov'`.
          If using 'artifact', coverage must be sent to codecov in a separate
          workflow. (*see upload-coverage.yml*)
    secrets:
      codecov_token:
        required: false
        description: >
          Token for codecov-action. Only used if `pytest-cov-flags`
          is not empty and coverage-upload is 'codecov'.

jobs:
  test:
    name: ${{ inputs.os }} py${{ inputs.python-version }} ${{ inputs.qt }}
    runs-on: ${{ inputs.os }}
    env:
      HATCH_BUILD_HOOKS_ENABLE: ${{ inputs.hatch-build-hooks-enable }}
      MIN_REQS_TEST: ${{ inputs.pip-install-min-reqs }}
      USE_CACHE: ${{ inputs.cache-key != '' && inputs.cache-path != '' && 'true' || 'false' }}
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      REPORT_FAIL: ${{ inputs.report-failures && inputs.report-failures || (github.event_name == 'schedule' && 'true' || 'false')}}
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache-dependency-path: ${{ inputs.python-cache-dependency-path }}
          cache: pip

      - run: python -m pip install --upgrade pip

      - name: Setup Qt Libraries
        if: ${{ inputs.qt != '' }}
        uses: tlambert03/setup-qt-libs@v1

      - uses: actions/cache@v4
        if: ${{ inputs.cache-key != '' && inputs.cache-path != '' }}
        id: cache
        with:
          path: ${{ inputs.cache-path }}
          key: ${{ inputs.cache-key }}

      - name: populate cache
        if: inputs.cache-key != '' && inputs.cache-path != '' && inputs.cache-script != '' && steps.cache.outputs.cache-hit != 'true'
        run: ${{ inputs.cache-script }}

      - name: Pip pre-install ${{ inputs.pip-pre-installs }}
        if: ${{ inputs.pip-pre-installs != '' }}
        run: python -m pip install ${{ inputs.pip-pre-installs }}

      - name: Install minimum requirements
        if: ${{ inputs.pip-install-min-reqs }}
        run: |
          python -m pip install git+https://github.com/tlambert03/hatch-min-requirements.git
          python -c "from hatch_min_requirements import patch_pyproject; patch_pyproject('pyproject.toml', 'min-reqs');"
          python -m pip install ${{ inputs.pip-install-flags }} .[min-reqs,${{ inputs.extras }}]

      - name: Install dependencies ${{ inputs.pip-install-pre-release && '--pre' || ''}}
        if: ${{ !inputs.pip-install-min-reqs }}
        run: python -m pip install ${{ inputs.pip-install-flags }} .[${{ inputs.extras }}]
        env:
          # common usage might be:
          #   pip-install-pre-release: github.event_name == 'schedule'
          PIP_PRE: ${{ inputs.pip-install-pre-release }}

      - name: Install Qt ${{ inputs.qt }}
        if: ${{ inputs.qt != '' }}
        run: python -m pip install ${{ inputs.qt }}

      - name: Pip post-install ${{ inputs.pip-post-installs }}
        if: ${{ inputs.pip-post-installs != '' }}
        run: python -m pip install ${{ inputs.pip-post-installs }} --force-reinstall

      - name: Install coverage
        run: python -m pip install coverage

      - name: Run tests
        if: ${{ inputs.qt == '' }}
        run: coverage run -p -m pytest --color=yes ${{ inputs.pytest-args }}

      - name: Run tests (headless)
        if: ${{ inputs.qt != '' }}
        uses: aganders3/headless-gui@v2
        with:
          run: coverage run -p -m pytest --color=yes ${{ inputs.pytest-args }}

      - name: Report failure
        if: ${{ failure() && env.REPORT_FAIL == 'true'}}
        uses: actions/github-script@v7
        env:
          ACTION_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          WORKFLOW_NAME: ${{ github.workflow }}
        with:
          script: |
            const { ACTION_URL, WORKFLOW_NAME } = process.env

            const issueTitle = `Tests failing in ${WORKFLOW_NAME}`;
            const labels = ['reusable-test-failure'];

            // Search for existing open issues with the same title and label
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels.join(','),
              state: 'open'
            });

            // If there is an open issue with the title, do not create a new one
            const hasOpenIssue = existingIssues.data.some(issue => issue.title === issueTitle);
            if (hasOpenIssue) {
              console.log('An open issue with the same title and label already exists. No new issue will be created.');
            } else {
              const issueBody = `A test failed. Please review the [workflow logs](${ACTION_URL}) for details.`;
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: labels
              });
              console.log('A new issue was created to report a failing test.');
            }

      - name: Generage coverage report
        if: inputs.coverage-upload == 'codecov'
        run: |
          python -m coverage combine --append
          python -m coverage xml -o coverage.xml
          python -m coverage report

      - name: codecov v4
        if: inputs.coverage-upload == 'codecov'
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: ${{ inputs.fail-on-coverage-error }}
          verbose: true
          token: ${{ secrets.codecov_token }}

      - name: Generate UUID
        if: inputs.coverage-upload == 'artifact'
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "UUID=$(powershell -Command "[guid]::NewGuid().ToString()")" >> $GITHUB_ENV
          else
            echo "UUID=$(uuidgen)" >> $GITHUB_ENV
          fi

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        if: inputs.coverage-upload == 'artifact'
        with:
          name: covreport-${{ inputs.os }}-py${{ inputs.python-version }}-${{ env.UUID }}
          path: ./.coverage*
